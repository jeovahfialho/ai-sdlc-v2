package main

import (
	"encoding/json"
	"html/template"
	"log"
	"net/http"
)

type Product struct {
	ID          int     `json:"id"`
	Name        string  `json:"name"`
	Price       float64 `json:"price"`
	Description string  `json:"description"`
}

var products []Product

func addProduct(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
		return
	}

	var newProduct Product
	err := json.NewDecoder(r.Body).Decode(&newProduct)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	products = append(products, newProduct)

	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(newProduct)
}

func getProducts(w http.ResponseWriter, r *http.Request) {
	json.NewEncoder(w).Encode(products)
}

func webInterface(w http.ResponseWriter, r *http.Request) {
	tmpl := template.Must(template.New("index").Parse(`
		<!DOCTYPE html>
		<html>
		<head>
			<title>Product Manager</title>
			<style>
				body {
					font-family: Arial, sans-serif;
					background-color: #f4f4f9;
					margin: 0;
					padding: 0;
					display: flex;
					flex-direction: column;
					align-items: center;
				}

				h1 {
					color: #333;
					margin-top: 30px;
				}

				form {
					background-color: #fff;
					padding: 20px;
					border-radius: 8px;
					box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
					width: 300px;
				}

				label {
					font-weight: bold;
					display: block;
					margin-bottom: 5px;
					color: #333;
				}

				input {
					width: 100%;
					padding: 8px;
					margin-bottom: 10px;
					border: 1px solid #ccc;
					border-radius: 4px;
				}

				button {
					background-color: #28a745;
					color: white;
					padding: 10px 15px;
					border: none;
					border-radius: 4px;
					cursor: pointer;
					width: 100%;
				}

				button:hover {
					background-color: #218838;
				}

				#productList {
					margin-top: 20px;
					list-style-type: none;
					padding: 0;
					width: 300px;
				}

				#productList li {
					background-color: #fff;
					margin-bottom: 10px;
					padding: 10px;
					border-radius: 8px;
					box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
					display: flex;
					justify-content: space-between;
					align-items: center;
				}
			</style>
			<script>
				async function addProduct() {
					let name = document.getElementById('name').value;
					let price = document.getElementById('price').value;
					let description = document.getElementById('description').value;

					let product = { id: Date.now(), name, price: parseFloat(price), description };
					let response = await fetch('/api/addProduct', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(product)
					});

					if (response.ok) {
						loadProducts();
					}
				}

				async function loadProducts() {
					let response = await fetch('/api/getProducts');
					let products = await response.json();

					let list = document.getElementById('productList');
					list.innerHTML = '';
					products.forEach(product => {
						list.innerHTML += '<li>' + product.name + ' - $' + product.price.toFixed(2) + '</li>';
					});
				}

				window.onload = loadProducts;
			</script>
		</head>
		<body>
			<h1>Product Manager</h1>
			<form onsubmit="event.preventDefault(); addProduct();">
				<label for="name">Name:</label>
				<input type="text" id="name" required><br>
				<label for="price">Price:</label>
				<input type="number" id="price" required><br>
				<label for="description">Description:</label>
				<input type="text" id="description" required><br>
				<button type="submit">Add Product</button>
			</form>

			<h2>Product List</h2>
			<ul id="productList"></ul>
		</body>
		</html>
	`))

	tmpl.Execute(w, nil)
}

func main() {
	// API endpoints
	http.HandleFunc("/api/addProduct", addProduct)
	http.HandleFunc("/api/getProducts", getProducts)

	// Web interface
	http.HandleFunc("/", webInterface)

	// Serve API on port 4000 and Web on port 4001
	go func() {
		log.Println("Starting API server on port 4000...")
		log.Fatal(http.ListenAndServe(":4000", nil))
	}()

	log.Println("Starting web server on port 4001...")
	log.Fatal(http.ListenAndServe(":4001", nil))
}
